// Code generated by protoc-gen-go. DO NOT EDIT.
// source: booklist.proto

/*
Package booklist is a generated protocol buffer package.

It is generated from these files:
	booklist.proto

It has these top-level messages:
	Book
	AddReply
	ListRequest
	ListReply
*/
package booklist

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Book struct {
	Id     int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Author string `protobuf:"bytes,3,opt,name=author" json:"author,omitempty"`
}

func (m *Book) Reset()                    { *m = Book{} }
func (m *Book) String() string            { return proto.CompactTextString(m) }
func (*Book) ProtoMessage()               {}
func (*Book) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Book) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Book) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Book) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

type AddReply struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *AddReply) Reset()                    { *m = AddReply{} }
func (m *AddReply) String() string            { return proto.CompactTextString(m) }
func (*AddReply) ProtoMessage()               {}
func (*AddReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AddReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ListRequest struct {
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ListReply struct {
	Books []*Book `protobuf:"bytes,1,rep,name=books" json:"books,omitempty"`
}

func (m *ListReply) Reset()                    { *m = ListReply{} }
func (m *ListReply) String() string            { return proto.CompactTextString(m) }
func (*ListReply) ProtoMessage()               {}
func (*ListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListReply) GetBooks() []*Book {
	if m != nil {
		return m.Books
	}
	return nil
}

func init() {
	proto.RegisterType((*Book)(nil), "booklist.Book")
	proto.RegisterType((*AddReply)(nil), "booklist.AddReply")
	proto.RegisterType((*ListRequest)(nil), "booklist.ListRequest")
	proto.RegisterType((*ListReply)(nil), "booklist.ListReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BookList service

type BookListClient interface {
	Add(ctx context.Context, in *Book, opts ...grpc.CallOption) (*AddReply, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
}

type bookListClient struct {
	cc *grpc.ClientConn
}

func NewBookListClient(cc *grpc.ClientConn) BookListClient {
	return &bookListClient{cc}
}

func (c *bookListClient) Add(ctx context.Context, in *Book, opts ...grpc.CallOption) (*AddReply, error) {
	out := new(AddReply)
	err := grpc.Invoke(ctx, "/booklist.BookList/Add", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookListClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := grpc.Invoke(ctx, "/booklist.BookList/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BookList service

type BookListServer interface {
	Add(context.Context, *Book) (*AddReply, error)
	List(context.Context, *ListRequest) (*ListReply, error)
}

func RegisterBookListServer(s *grpc.Server, srv BookListServer) {
	s.RegisterService(&_BookList_serviceDesc, srv)
}

func _BookList_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Book)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookListServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booklist.BookList/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookListServer).Add(ctx, req.(*Book))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookList_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookListServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/booklist.BookList/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookListServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BookList_serviceDesc = grpc.ServiceDesc{
	ServiceName: "booklist.BookList",
	HandlerType: (*BookListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _BookList_Add_Handler,
		},
		{
			MethodName: "List",
			Handler:    _BookList_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "booklist.proto",
}

func init() { proto.RegisterFile("booklist.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 216 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xc1, 0x4e, 0x84, 0x30,
	0x10, 0x40, 0x2d, 0xb0, 0x2b, 0xcc, 0x46, 0x0e, 0x63, 0x34, 0xcd, 0x9e, 0x48, 0xc3, 0x81, 0xc4,
	0x84, 0x44, 0xf4, 0x07, 0xe0, 0xec, 0xa9, 0x7f, 0x00, 0x69, 0xa3, 0x0d, 0x60, 0x91, 0x96, 0x83,
	0x7f, 0x6f, 0x5a, 0x44, 0x0c, 0xb7, 0xbe, 0x99, 0xbe, 0xe6, 0xa5, 0x90, 0x76, 0x5a, 0xf7, 0x83,
	0x32, 0xb6, 0x9c, 0x66, 0x6d, 0x35, 0xc6, 0x1b, 0xb3, 0x06, 0xa2, 0x46, 0xeb, 0x1e, 0x53, 0x08,
	0x94, 0xa0, 0x24, 0x23, 0xc5, 0x89, 0x07, 0x4a, 0x20, 0x42, 0xf4, 0xd9, 0x8e, 0x92, 0x06, 0x19,
	0x29, 0x12, 0xee, 0xcf, 0xf8, 0x08, 0xe7, 0x76, 0xb1, 0x1f, 0x7a, 0xa6, 0xa1, 0x9f, 0xfe, 0x12,
	0xcb, 0x21, 0xae, 0x85, 0xe0, 0x72, 0x1a, 0xbe, 0x91, 0xc2, 0xed, 0x28, 0x8d, 0x69, 0xdf, 0xa5,
	0x7f, 0x2c, 0xe1, 0x1b, 0xb2, 0x3b, 0xb8, 0xbc, 0x29, 0x63, 0xb9, 0xfc, 0x5a, 0xa4, 0xb1, 0xec,
	0x19, 0x92, 0x15, 0x9d, 0x95, 0xc3, 0xc9, 0x15, 0x19, 0x4a, 0xb2, 0xb0, 0xb8, 0x54, 0x69, 0xf9,
	0xd7, 0xeb, 0xe2, 0xf8, 0xba, 0xac, 0x46, 0x88, 0x1d, 0x3a, 0x0d, 0x9f, 0x20, 0xac, 0x85, 0xc0,
	0xc3, 0xcd, 0x2b, 0xee, 0xbc, 0x25, 0xb1, 0x1b, 0x7c, 0x85, 0xc8, 0x4b, 0x0f, 0xfb, 0xf6, 0x5f,
	0xca, 0xf5, 0xfe, 0x38, 0xf6, 0x56, 0x77, 0xf6, 0x7f, 0xf5, 0xf2, 0x13, 0x00, 0x00, 0xff, 0xff,
	0xc9, 0x8e, 0x0d, 0x90, 0x3d, 0x01, 0x00, 0x00,
}
